# 소프트웨어 테스트 원칙

## 단위 테스트가 필요한 이유?

애플리케이션이 기대한대로 잘 동작함을 증명하고, 버그를 조기에 잡아내기 위함

**특징**

- 기능 테스트보다 훨씬 높은 테스트 커버리지 달성 가능
	- 기능 테스트: 
	- 오류 상황 시뮬레이션도 단위 테스트라면 쉽게 해낼 수 있음
- 팀 생산성 향상
	- 단위 테스트가 잘 만들어져 있다면 다른 컨포넌트의 완료를 기다리지 않고도 검증된 코드를 납품할 수 있음
- 회귀 테스트를 수행하고 디버깅의 필요성을 줄여줌
	- 회귀 테스트
	
	> 회귀 버그를 찾는 모든 소프트웨어 테스트 방식은 회귀 테스트라 할 수 있다. 회귀 버그는 이전에 제대로 작동하던 소프트웨어 기능에 문제가 생기는 것을 가리킨다. 일반적으로 회귀 버그는 프로그램 변경 중 뜻하지 않게 발생한다.

	- 디버깅할 필요성을 줄여줌
- 리팩토링과 코스 수정 시 올바로 하고 있다는 확신을 줌
	- 단위 테스트는 기존 코드를 망가뜨리지 않는지 바로 알려줌
- 구현 품질의 향상
- 기대하는 행위를 문서화함
	- 사용법을 보여주는 에제 코드
- 코드 커버리지 등 각종 측정을 가능하게 함
	- 코드 커버리지: 

## 테스트의 종류

> unit < integration < functional < stress/load < acceptance

### 통합 테스트(integration test)

- 작업 단위가 연계된 워크플로우를 테스트함
- 컨포넌트간의 상호작용이 통합테스트의 대상

|상호작용 유형 			|테스트방법|
--------------------------------------
|객체 간 상호작용 		|객체에 정의된 메서드들을 호출|
|서비스 간 상호작용 		|서블릿이나 애플리케이션이 구동하는 과정에서 실행, DB 혹은 외부 자원이나 기기를 연결 및 사용할 수 있음|
|서브 시스템 간 상호작용 	|프론트엔드로부터 요청이 잘 전달되어 백엔드가 적절히 응답하는지 검사|


### 기능 테스트(functional test)

- 공개된 API의 가장 바깥쪽에 해당하는 코드를 검사, 애플리케이션의 유스케이스 단위로 테스트
- ex) 페이지에 접속하려는 http 요청을 보내고, 응답으로 200 코드가 오는지 확인하는 방법

### 스트레스 테스트(stress test)

- 주어진 단위 시간 동안 애플리케이션이 얼마나 많은 요청을 처리할 수 있는가를 검사
- 실제 운영 환경과 유사한 것이 좋다

### 인수 테스트(acceptance test)

- 고객의 요구를 충족시키는지 검사
- 사용성, look and feel, 포함시키기도 함

## 단위 테스트의 종류

1. 논리 단위 테스트
	- 한 메서드에 집중한 테스트
2. 통합 단위 테스트
	- 데이터베이스를 효과적으로 호출하는가?
3. 기능 단위 테스트
	- 자극 반응(sitmulus response)을 확인하기 위해 통합 단위 테스트의 경계를 확장한 테스트
	- ex) 페이지에 요청을 보내고 정상 응답 코드가 오는지 확인

## 블랙박스 테스트와 화이트박스 테스트

### 블랙박스 테스트

- 안에 어떻게 돌아가는지는 모르고 외부 인터페이스에 의존해 정확성의 검증

### 화이트박스 테스트

- 구현에 대한 상세 지식을 모두 활용한 테스트
- 유리 테스트라고도 불림

